plot(g, edge.arrow.size=0.4)
g_advice_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"advice_tie")==0])
plot(g_advice_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
# Left for you to work out
g_friendship_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"friendship_tie")==0])
plot(g_friendship_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
g_reports_to_only <- delete.edges(g,E(g)[get.edge.attribute(g,"reports_to")==0])
plot(g_reports_to_only, vertex.size = 20, edge.arrow.size= 0.4)
reports_to_layout <- layout.kamada.kawai(g_reports_to_only)
plot(g_reports_to_only, edge.arrow.size=.25, vertex.label.cex=0.6, layout=reports_to_layout)
dept_vertex_colors = get.vertex.attribute(g,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(g_reports_to_only, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5)
# Left for you to work out
tenure_vertex_sizes=get.vertex.attribute(g_reports_to_only, "TENURE")
V(g_reports_to_only)$size=tenure_vertex_sizes
plot(g_reports_to_only, edge.arrow.size= 0.4)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(g)$color[ E(g)$advice_tie==1 ] = tie_type_colors[1]
E(g)$color[ E(g)$friendship_tie==1 ] = tie_type_colors[2]
E(g)$color[ E(g)$reports_to_tie==1 ] = tie_type_colors[3]
E(g)$arrow.size=.5
V(g)$color = dept_vertex_colors
V(g)$frame = dept_vertex_colors
plot(g, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5,vertex.size=tenure_vertex_sizes)
legend(1, 1.25, legend = c('Advice', 'Friendship', 'Reports To'), col = tie_type_colors, lty=1, cex = .7)
# Left for you to work out
plot(g_friendship_tie,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
g_friendship_tie
# Left for you to work out
plot(g_friendship_tie,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
library(igraph)
advice_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment EdgeList Advice.csv')
friendship_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Friendship.csv')
reports_to_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Reports To.csv')
attributes_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Attributes.csv', header=T)
advice_data_frame
head(friendship_data_frame)
tail(reports_to_data_frame)
fix(attributes_data_frame)
colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
# Left for you to work out
fix(advice_data_frame)
fix(attributes_data_frame)
fix(friendship_data_frame)
fix(reports_to_data_frame)
advice_data_frame$ego == friendship_data_frame$ego # should return TRUE
which(advice_data_frame$ego != friendship_data_frame$ego)
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
full_data_frame <- cbind(advice_data_frame, friendship_data_frame$friendship_tie, reports_to_data_frame$reports_to_tie)
head(full_data_frame)
names(full_data_frame)[4:5] <- c("friendship_tie", "reports_to_tie")
head(full_data_frame)
full_nonzero_edges <- subset(full_data_frame, (advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(full_nonzero_edges)
# Left for you to work out
nw<-graph.data.frame(full_nonzero_edges)
summary(nw)
# Left for you to work out
get.edge.attribute(nw)
# Left for you to work out
nw<-as.undirected(nw)
plot(nw)
attributes = cbind(1:length(attributes_data_frame[,1]), attributes_data_frame)
attributes
g <- graph.data.frame(d = full_nonzero_edges, vertices = attributes)
summary(g)
# Left for you to work out
get.vertex.attribute(g)
get.edge.attribute(g)
# Left for you to work out
plot(g, edge.arrow.size=0.4)
g_advice_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"advice_tie")==0])
plot(g_advice_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
# Left for you to work out
g_friendship_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"friendship_tie")==0])
plot(g_friendship_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
g_reports_to_only <- delete.edges(g,E(g)[get.edge.attribute(g,"reports_to")==0])
plot(g_reports_to_only, vertex.size = 20, edge.arrow.size= 0.4)
reports_to_layout <- layout.kamada.kawai(g_reports_to_only)
plot(g_reports_to_only, edge.arrow.size=.25, vertex.label.cex=0.6, layout=reports_to_layout)
dept_vertex_colors = get.vertex.attribute(g,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(g_reports_to_only, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5)
# Left for you to work out
tenure_vertex_sizes=get.vertex.attribute(g_reports_to_only, "TENURE")
V(g_reports_to_only)$size=tenure_vertex_sizes
plot(g_reports_to_only, edge.arrow.size= 0.4)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(g)$color[ E(g)$advice_tie==1 ] = tie_type_colors[1]
E(g)$color[ E(g)$friendship_tie==1 ] = tie_type_colors[2]
E(g)$color[ E(g)$reports_to_tie==1 ] = tie_type_colors[3]
E(g)$arrow.size=.5
V(g)$color = dept_vertex_colors
V(g)$frame = dept_vertex_colors
plot(g, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5,vertex.size=tenure_vertex_sizes)
legend(1, 1.25, legend = c('Advice', 'Friendship', 'Reports To'), col = tie_type_colors, lty=1, cex = .7)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
library(igraph)
advice_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment EdgeList Advice.csv')
friendship_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Friendship.csv')
reports_to_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Reports To.csv')
attributes_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Attributes.csv', header=T)
advice_data_frame
head(friendship_data_frame)
tail(reports_to_data_frame)
fix(attributes_data_frame)
colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
# Left for you to work out
fix(advice_data_frame)
fix(attributes_data_frame)
fix(friendship_data_frame)
fix(reports_to_data_frame)
advice_data_frame$ego == friendship_data_frame$ego # should return TRUE
which(advice_data_frame$ego != friendship_data_frame$ego)
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
full_data_frame <- cbind(advice_data_frame, friendship_data_frame$friendship_tie, reports_to_data_frame$reports_to_tie)
head(full_data_frame)
names(full_data_frame)[4:5] <- c("friendship_tie", "reports_to_tie")
head(full_data_frame)
full_nonzero_edges <- subset(full_data_frame, (advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(full_nonzero_edges)
# Left for you to work out
nw<-graph.data.frame(full_nonzero_edges)
summary(nw)
# Left for you to work out
get.edge.attribute(nw)
# Left for you to work out
nw<-as.undirected(nw)
plot(nw)
attributes = cbind(1:length(attributes_data_frame[,1]), attributes_data_frame)
attributes
g <- graph.data.frame(d = full_nonzero_edges, vertices = attributes)
summary(g)
# Left for you to work out
get.vertex.attribute(g)
get.edge.attribute(g)
# Left for you to work out
plot(g, edge.arrow.size=0.4)
g_advice_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"advice_tie")==0])
plot(g_advice_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
# Left for you to work out
g_friendship_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"friendship_tie")==0])
plot(g_friendship_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
g_reports_to_only <- delete.edges(g,E(g)[get.edge.attribute(g,"reports_to")==0])
plot(g_reports_to_only, vertex.size = 20, edge.arrow.size= 0.4)
reports_to_layout <- layout.kamada.kawai(g_reports_to_only)
plot(g_reports_to_only, edge.arrow.size=.25, vertex.label.cex=0.6, layout=reports_to_layout)
dept_vertex_colors = get.vertex.attribute(g,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(g_reports_to_only, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5)
# Left for you to work out
tenure_vertex_sizes=get.vertex.attribute(g_reports_to_only, "TENURE")
V(g_reports_to_only)$size=tenure_vertex_sizes
plot(g_reports_to_only, edge.arrow.size= 0.4)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(g)$color[ E(g)$advice_tie==1 ] = tie_type_colors[1]
E(g)$color[ E(g)$friendship_tie==1 ] = tie_type_colors[2]
E(g)$color[ E(g)$reports_to_tie==1 ] = tie_type_colors[3]
E(g)$arrow.size=.5
V(g)$color = dept_vertex_colors
V(g)$frame = dept_vertex_colors
plot(g, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5,vertex.size=tenure_vertex_sizes)
legend(1, 1.25, legend = c('Advice', 'Friendship', 'Reports To'), col = tie_type_colors, lty=1, cex = .7)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizess)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
# Left for you to work out
plot(g_friendship_tie_only,layout=reports_to_layout,vertex.color=dept_vertex_colors,vertex.label=NA,edge.arrow.size = 0.5,vertex.size=tenure_vertex_sizes)
library(igraph)
advice_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment EdgeList Advice.csv')
friendship_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Friendship.csv')
reports_to_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Reports To.csv')
attributes_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Attributes.csv', header=T)
advice_data_frame
head(friendship_data_frame)
tail(reports_to_data_frame)
fix(attributes_data_frame)
colnames(advice_data_frame) <- c('ego', 'alter', 'advice_tie')
colnames(friendship_data_frame) <- c('ego', 'alter', 'friendship_tie')
colnames(reports_to_data_frame) <- c('ego', 'alter', 'reports_to_tie')
# Left for you to work out
fix(advice_data_frame)
fix(attributes_data_frame)
fix(friendship_data_frame)
fix(reports_to_data_frame)
advice_data_frame$ego == friendship_data_frame$ego # should return TRUE
which(advice_data_frame$ego != friendship_data_frame$ego)
which(advice_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$alter != friendship_data_frame$alter)
which(reports_to_data_frame$ego != friendship_data_frame$ego)
full_data_frame <- cbind(advice_data_frame, friendship_data_frame$friendship_tie, reports_to_data_frame$reports_to_tie)
head(full_data_frame)
names(full_data_frame)[4:5] <- c("friendship_tie", "reports_to_tie")
head(full_data_frame)
full_nonzero_edges <- subset(full_data_frame, (advice_tie > 0 | friendship_tie > 0 | reports_to_tie > 0))
head(full_nonzero_edges)
# Left for you to work out
nw<-graph.data.frame(full_nonzero_edges)
summary(nw)
# Left for you to work out
get.edge.attribute(nw)
# Left for you to work out
nw<-as.undirected(nw)
plot(nw)
attributes = cbind(1:length(attributes_data_frame[,1]), attributes_data_frame)
attributes
g <- graph.data.frame(d = full_nonzero_edges, vertices = attributes)
summary(g)
# Left for you to work out
get.vertex.attribute(g)
get.edge.attribute(g)
# Left for you to work out
plot(g, edge.arrow.size=0.4)
g_advice_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"advice_tie")==0])
plot(g_advice_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
# Left for you to work out
g_friendship_tie_only <- delete.edges(g,E(g)[get.edge.attribute(g,"friendship_tie")==0])
plot(g_friendship_tie_only, vertex.size = 20, edge.arrow.size= 0.4)
# Left for you to work out
g_reports_to_only <- delete.edges(g,E(g)[get.edge.attribute(g,"reports_to")==0])
plot(g_reports_to_only, vertex.size = 20, edge.arrow.size= 0.4)
reports_to_layout <- layout.kamada.kawai(g_reports_to_only)
plot(g_reports_to_only, edge.arrow.size=.25, vertex.label.cex=0.6, layout=reports_to_layout)
dept_vertex_colors = get.vertex.attribute(g,"DEPT")
colors = c('Black', 'Red', 'Blue', 'Yellow', 'Green')
dept_vertex_colors[dept_vertex_colors == 0] = colors[1]
dept_vertex_colors[dept_vertex_colors == 1] = colors[2]
dept_vertex_colors[dept_vertex_colors == 2] = colors[3]
dept_vertex_colors[dept_vertex_colors == 3] = colors[4]
dept_vertex_colors[dept_vertex_colors == 4] = colors[5]
plot(g_reports_to_only, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5)
# Left for you to work out
tenure_vertex_sizes=get.vertex.attribute(g_reports_to_only, "TENURE")
V(g_reports_to_only)$size=tenure_vertex_sizes
plot(g_reports_to_only, edge.arrow.size= 0.4)
tie_type_colors = c(rgb(1,0,0,.5), rgb(0,0,1,.5), rgb(0,0,0,.5))
E(g)$color[ E(g)$advice_tie==1 ] = tie_type_colors[1]
E(g)$color[ E(g)$friendship_tie==1 ] = tie_type_colors[2]
E(g)$color[ E(g)$reports_to_tie==1 ] = tie_type_colors[3]
E(g)$arrow.size=.5
V(g)$color = dept_vertex_colors
V(g)$frame = dept_vertex_colors
plot(g, layout=reports_to_layout, vertex.color=dept_vertex_colors, vertex.label=NA, edge.arrow.size=.5,vertex.size=tenure_vertex_sizes)
legend(1, 1.25, legend = c('Advice', 'Friendship', 'Reports To'), col = tie_type_colors, lty=1, cex = .7)
head(advice_data_frame)
advice_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment EdgeList Advice.csv')
friendship_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Friendship.csv')
reports_to_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Edgelist Reports To.csv')
attributes_data_frame <- read.csv('C:/MPS - Data analytics/846/Lesson (4)/Docs/846 Lesson 4 Assignment Attributes.csv', header=T)
head(advice_data_frame)
tail(advice_data_frame)
str(advice_data_frame)
dim(advice_data_frame)
str(advice_data_frame)
dim(advice_data_frame)
# Generate summarizing statistics for aa
summarise(aa,
n_flights = n(),
n_canc = sum(Cancelled == 1),
avg_delay = mean(ArrDelay, na.rm = TRUE))
library("caTools", lib.loc="C:/R/library")
detach("package:caTools", unload=TRUE)
dataset = read.csv('Data.csv')
# Importing the dataset
dataset = read.csv('C:/MLAZ/Part 1 - Data Preprocessing/Data.csv')
dataset
dataset$Age = ifelse(is.na(dataset$Age), ave(dataset$Age,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Age
dataset$Salary = ifelse(is.na(dataset$Salary), ave(dataset$Salary,
FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
dataset$Salary
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3)
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
?factor
dataset$Country=factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
dataset$Country
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
dataset$Purchased
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
training_set=subset(dataset, split==T)
test_set=subset(dataset, split==F)
training_set=subset(dataset, split==TRUE)
test_set=subset(dataset, split==FALSE)
split
library(caTools)
set.seed(123)
split=sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set=subset(dataset, split == TRUE)
test_set=subset(dataset, split == FALSE)
View(test_set)
View(training_set)
# Feature Scaling
training_set[,2:3]=scale(training_set[,2:3])
test_set[.2:3]=scale(test_set[.2:3])
training_set[,2:3]=scale(training_set[,2:3])
test_set[.2:3]=scale(test_set[.2:3])
test_set[,2:3]=scale(test_set[,2:3])
cwd
cwd()
get.pwd()
get_pwd
getwd
getwd()
# Simple Linear Regression
setwd(C:/MLAZ/Part 2 - Regression/Section 4 - Simple Linear Regression)
# Simple Linear Regression
setwd('C:/MLAZ/Part 2 - Regression/Section 4 - Simple Linear Regression')
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Simple Linear Regression to the Training set
regressor = lm()
?lm
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = dataset$Salary ~ dataset$YearsExperience,
data=training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
dataset = read.csv('Salary_Data.csv')
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = dataset$Salary ~ dataset$YearsExperience,
data=training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
training_set
dataset
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set
View(training_set)
View(test_set)
setwd('C:/MLAZ/Part 2 - Regression/Section 4 - Simple Linear Regression')
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(training_set)
regressor = lm(formula = dataset$Salary ~ dataset$YearsExperience,
data=training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data=training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes( x = training_set$YearsExperience,
y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience,
y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
